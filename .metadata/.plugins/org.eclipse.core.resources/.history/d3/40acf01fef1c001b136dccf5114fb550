/*
 * Write an Application to generate below HCLK frequencies using PLL.
 * Use HSI as PLL's input source and repeat the exercise using HSE as input source.
 *  50 MHz
 *  84 MHz
 *  120 MHz
 */


#include "main.h"
#include <string.h>

UART_HandleTypeDef uart2;


int main()
{
	//first API to be called in order to use STMCube HAL LAyer
	//it does HL initializations and LL initializations of processor
	HAL_Init();

	uint8_t clk = SYS_CLK_FREQ_50MHz;						/*!< clk is value of sytem clock
                                      	  	  	  	  	  	  	 This parameter can be a value of @ref SYS_CLK_FREQ                        */


	//not present in Cube HAL, this  is application specific, by default system clock will be running internal RC oscillator, but to change it this function is used
	SystemClockConfig( clk );

	//HLL initializations and LL initializations of peripheral
	UART2_Init ();

	print_clock_info ();

	while(1);

	return 0;
}

void SystemClockConfig( uint8_t clk )
{
	RCC_OscInitTypeDef osc_init;

	memset ( &osc_init, 0, sizeof(osc_init) );
	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	osc_init.HSIState = RCC_HSI_ON;
	osc_init.HSICalibrationValue = 16;
	osc_init.PLL.PLLState = RCC_PLL_ON;
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSI;

	RCC_ClkInitTypeDef clk_init;
	clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_SYSCLK | RCC_SYSCLKSOURCE_PLLCLK;

	uint8_t Flash_Latency = 0;

	switch ( clk )
	{
		case  SYS_CLK_FREQ_50MHz:
		{
			osc_init.PLL.PLLM = 16;
			osc_init.PLL.PLLN = 200;
			osc_init.PLL.PLLP = 4;
			osc_init.PLL.PLLQ = 2;							//default value
			osc_init.PLL.PLLR = 2;							//default value

			clk_init.AHBCLKDivider = RCC_HCLK_DIV1;
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
			clk_init.APB2CLKDivider = RCC_HCLK_DIV1;

			Flash_Latency = FLASH_ACR_LATENCY_1WS;

			break;
		}

		case  SYS_CLK_FREQ_84MHz:
		{
			osc_init.PLL.PLLM = 16;
			osc_init.PLL.PLLN = 168;
			osc_init.PLL.PLLP = 2;
			osc_init.PLL.PLLQ = 2;							//default value
			osc_init.PLL.PLLR = 2;							//default value

			clk_init.AHBCLKDivider = RCC_HCLK_DIV1;
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
			clk_init.APB2CLKDivider = RCC_HCLK_DIV1;

			Flash_Latency = FLASH_ACR_LATENCY_2WS;
			break;
		}

		case  SYS_CLK_FREQ_120MHz:
		{
			osc_init.PLL.PLLM = 16;
			osc_init.PLL.PLLN = 240;
			osc_init.PLL.PLLP = 2;
			osc_init.PLL.PLLQ = 2;							//default value
			osc_init.PLL.PLLR = 2;							//default value
			clk_init.AHBCLKDivider = RCC_HCLK_DIV1;
			clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
			clk_init.APB2CLKDivider = RCC_HCLK_DIV4;

			Flash_Latency = FLASH_ACR_LATENCY_3WS;
			break;
		}
		default:
			return;
	}
	/*
	 * While selecting value of PLLM we need to keep in mind minimum and maximum value of not only value of PLLM, but also of input Volt. Controlled Oscillator (VCO) and
	 *  same goes to PPLP,we need to keep in mind not only value of PLLM, but also of minimum and maximum value of output Volt. Controlled Oscillator (VCO)
	 *
	 */



	if ( HAL_RCC_OscConfig ( &osc_init ) != HAL_OK )
	{
		Error_Handler();
	}



	if ( HAL_RCC_ClockConfig ( &clk_init, Flash_Latency ) != 1 )
	{
		Error_Handler();
	}

	/* Note: When main clock of uC ie SYSCLK is changed then we have to also reconfigure those things which were configured by keeping previous SYSCLK in mind like SYSTICK timer inits, peripheral init etc. */

	//Systick Configurations

	HAL_SYSTICK_CLKSourceConfig ( SYSTICK_CLKSOURCE_HCLK );

	if ( HAL_SYSTICK_Config ( HAL_RCC_GetSysClockFreq() / 1000 ) != 1 )
	{
		Error_Handler();
	}


}

void UART2_Init ()
{
		//UART_HandleTypeDef uart2;
		uart2.Instance = USART2;
		uart2.Init.BaudRate = 115200;
		uart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
		uart2.Init.Mode = UART_MODE_RX;
		uart2.Init.OverSampling = UART_OVERSAMPLING_8;
		uart2.Init.Parity = UART_PARITY_NONE;
		uart2.Init.StopBits = UART_STOPBITS_1;
		uart2.Init.WordLength = UART_WORDLENGTH_8B;

		if ( HAL_UART_Init ( &uart2 ) != HAL_OK )		//from this api, HAL_UART_MspInit() api will called and LL inits of peripheral will be done
		{
			//something went wrong
			Error_Handler ();
		}
}

void print_clock_info ()
{
	char msg[100];

	memset ( msg, 0, sizeof(msg) );
	sprintf ( msg, "SYSCLK: %ld \r\n", HAL_RCC_GetSysClockFreq() );
	HAL_UART_Transmit( &uart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY );

	memset ( msg, 0, sizeof(msg) );
	sprintf ( msg, "HCLK: %ld \r\n", HAL_RCC_GetHCLKFreq() );
	HAL_UART_Transmit( &uart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY );

	memset ( msg, 0, sizeof(msg) );
	sprintf ( msg, "PCLK1: %ld \r\n", HAL_RCC_GetPCLK1Freq() );
	HAL_UART_Transmit( &uart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY );

	memset ( msg, 0, sizeof(msg) );
	sprintf ( msg, "PCLK2: %ld \r\n", HAL_RCC_GetPCLK2Freq() );
	HAL_UART_Transmit( &uart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY );

}


void Error_Handler ()
{
	//we can give warning here like blinking red led
	while(1);
}




/*
 * 1. Processor Initializations
 * 2. System Clock Configurations
 * 3. Peripheral Initializations
 * 	  High Level Inits (done in UART2_Init() ) + Low Level Inits ( done in msp.c)
 *
 *
 * Processor Initializations: ( done in HAL_Inits() )
 * - High Level Inits
 * - Low Level Inits (call is made by HAL_Init() to HAL_MspInit() in msp.c to do this task)
 *
 *
 * Peripheral Initializations:
 * - High Level Inits   ( done in UART2_Init () )
 * - Low Level Inits	(call is made by HAL_UART_Init() to HAL_UART_MspInit() in msp.c to do this task)
 *
 * */
