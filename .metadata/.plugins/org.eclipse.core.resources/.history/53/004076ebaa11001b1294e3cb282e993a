#include "stm32f4xx_hal.h"

void HAL_MspInit(void)
{
	//here we will do processor specific low level initializations required for the application

	//1. Set up the priority grouping for the processor
	HAL_NVIC_SetPriorityGrouping ( NVIC_PRIORITYGROUP_4 );

	//2. Enable required system exceptions of the processor
	SCB->SHCSR |= ( 0x7 << 16 );							//enabling MemoryManagement, BusFault, UsageFault system  exception
	/*HAL_NVIC_EnableIRQ ( MemoryManagement_IRQn  );
	HAL_NVIC_EnableIRQ( BusFault_IRQn );
	HAL_NVIC_EnableIRQ( UsageFault_IRQn );*/

	//3. Configure the priority for the system exceptions
	HAL_NVIC_SetPriority( MemoryManagement_IRQn, 0, 0 );
	HAL_NVIC_SetPriority( BusFault_IRQn, 0, 0 );
	HAL_NVIC_SetPriority( UsageFault_IRQn, 0, 0 );

	//Note: All the APIs which deals with processor specific details are in "stm32f4xx_hal_cortex.c" header file

	// There can be many other processor specific low level intialisations like low power mode etc, all depends upon the requirement of application

}


void HAL_UART_MspInit (void)
{
	//low level inits of peripheral (uart) as required by application

	/*********************1. Enable the clock of USART2 peripheral*****************/
	__HAL_RCC_USART2_CLK_DISABLE();

	/*********************2. Pin musking configurations****************************/
	GPIO_InitTypeDef gpio;
	gpio.Mode = GPIO_MODE_AF_PP;
	gpio.Pull = GPIO_PULLUP;
	gpio.Speed = GPIO_SPEED_FREQ_MEDIUM;
	gpio.Alternate = GPIO_AF7_USART2;					//bringing UART functionality to PortA

	//USART2 Tx
	gpio.Pin = GPIO_PIN_2;
	HAL_GPIO_Init ( GPIOA,  &gpio );					//bringing UART Tx functionality to PortA pin 2

	//USART2 Rx
	gpio.Pin = GPIO_PIN_3;
	HAL_GPIO_Init ( GPIOA,  &gpio );					//bringing UART Rx functionality to PortA pin 3

	/********************3. IRQ Enabling and priority setting (ie NVIC settings)*************/
	HAL_NVIC_EnableIRQ ( USART2_IRQn );
	HAL_NVIC_SetPriority( USART2_IRQn, 15, 0 );
}
