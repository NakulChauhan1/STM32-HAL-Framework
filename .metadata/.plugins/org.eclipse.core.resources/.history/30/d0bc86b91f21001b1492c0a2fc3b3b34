/*
 * This Application produces square wave forms of
 * 500Hz, 1KHz, 2KHz and 4KHz on 4 different output
 * channels.
 *
 * */


#include "main.h"
#include<string.h>


void SystemClockConfig ();
void TIM2_Init ();
void Error_Handler();
void UART2_Init ();							//UART is used for printing info in serial monitor/terminal
void GPIO_Init ();

TIM_HandleTypeDef htim_2;
TIM_IC_InitTypeDef sConfig;
UART_HandleTypeDef huart;

volatile uint8_t is_capture_done = 0;

int main ()
{
	HAL_Init ();

	SystemClockConfig ();


	TIM2_Init ();

	UART2_Init ();										//because we want to send freq of signal value over uart to print it in terminal




	return 0;
}



void SystemClockConfig ()
{
		RCC_OscInitTypeDef osc_init;

		memset ( &osc_init, 0, sizeof(osc_init) );
		osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
		osc_init.HSEState = RCC_HSE_ON;
		osc_init.HSIState = RCC_HSI_ON;
		osc_init.LSEState = RCC_LSE_ON;						//LSE Configurations
		osc_init.HSICalibrationValue = 16;
		osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
		osc_init.PLL.PLLState = RCC_PLL_ON;
		osc_init.PLL.PLLM = 8;
		osc_init.PLL.PLLN = 50;
		osc_init.PLL.PLLP = 2;
		osc_init.PLL.PLLQ = 2;
		osc_init.PLL.PLLR = 2;

		if ( HAL_RCC_OscConfig ( &osc_init ) != HAL_OK )			//it activates HSI, LSE crystal oscillator and waits for turning it on
		{
			Error_Handler();
		}

		RCC_ClkInitTypeDef clk_init;
		uint32_t FLatency;

		memset ( &clk_init, 0, sizeof(clk_init) );
		clk_init.ClockType = ( RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 );
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
		clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
		clk_init.APB2CLKDivider = RCC_HCLK_DIV1;
		FLatency = FLASH_ACR_LATENCY_1WS;

		if ( HAL_RCC_ClockConfig ( &clk_init, FLatency ) != HAL_OK )
		{
			Error_Handler();
		}

		/* After this SYSCLK will be 50 MHz */

}



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)					//whenever capture event occurs then this callback will be called
{
	/* whenever capture interrupt happens then value of counter register is copied to CCR register and therefore we have to save
	  CCR's value in order to calculate the period of the signal applied */

	if ( is_capture_done == 0 )					//protecting the critical section ie shared variable first and second
	{
		if ( first < 0 )							//means first capture event has happened
		{
			first = __HAL_TIM_GET_COMPARE( htim, TIM_CHANNEL_1 );
		}

		if ( second < 0 && first > 0 )				//means second capture event has happened
		{
			second = __HAL_TIM_GET_COMPARE( htim, TIM_CHANNEL_1 );
			is_capture_done = 1;
		}
	}

}

void TIM2_Init ()
{
	htim_2.Instance = TIM2;
	htim_2.Init.Prescaler = 1;
	htim_2.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim_2.Init.Period = 0xFFFFFFFF;

	if ( HAL_TIM_OC_Init ( &htim_2 ) != HAL_OK )
	{
		Error_Handler ();
	}

	TIM_OC_InitTypeDef sConfig;
	sConfig.OCMode = TIM_OCMODE_TOGGLE;
	HAL_TIM_OC_ConfigChannel ();
}

void UART2_Init ()
{
	huart.Instance = USART2;
	huart.Init.BaudRate = 11520;
	huart.Init.WordLength = UART_WORDLENGTH_8B;
	huart.Init.StopBits = UART_STOPBITS_1;
	huart.Init.Parity = UART_PARITY_NONE;
	huart.Init.Mode = UART_MODE_TX;
	huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart.Init.OverSampling = UART_OVERSAMPLING_8;

	if ( HAL_UART_Init( &huart ) != HAL_OK )						//for low levels inits of uart, msp api will be called from inside of this API
	{
		Error_Handler();
	}
}


void Error_Handler()
{
	while(1);
}

















/*
 * 1. Processor Initializations
 * 2. System Clock Configurations
 * 3. Peripheral Initializations
 * 	  High Level Inits (done in UART2_Init() ) + Low Level Inits ( done in msp.c)
 *
 *
 * Processor Initializations: ( done in HAL_Inits() )
 * - High Level Inits
 * - Low Level Inits (call is made by HAL_Init() to HAL_MspInit() in msp.c to do this task)
 *
 *
 * Peripheral Initializations:
 * - High Level Inits   ( done in UART2_Init () )
 * - Low Level Inits	(call is made by HAL_UART_Init() to HAL_UART_MspInit() in msp.c to do this task)
 *
 * */
