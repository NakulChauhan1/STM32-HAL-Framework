/*
 * Write an Application in which TIM6 triggers Update interrupt for every 10ms and sends some data over UART2 after this delay.
	Measure the current consumption without sleep mode and with sleep mode.

	Enter the sleep mode using SLEEPONEXIT feature
 *
 * */


#include "main.h"
#include<string.h>

void SystemClockConfig();
void TIM6_Inits();
void Error_Handler();
void GPIO_Inits();
void ToggleWithDelay ();
void UART2_Inits ();

TIM_HandleTypeDef htim_6;
UART_HandleTypeDef huart2;

char data[] = "SLEEPONEXIT feature\r\n";

int main ()
{

	//first API to be called in order to use STMCube HAL LAyer
	//it does HL initializations and LL initializations of processor


	HAL_Init();						//processor level initializations

	//clock configurations for the Application
	SystemClockConfig();

	//HLL initializations and LL initializations of peripherals

	//Initializations of TIMER
	TIM6_Inits();

	//Initializations of GPIO
	GPIO_Inits();

	//Initializations of UART
	UART2_Inits ();


	//enabling Sleep Mode using Sleep on Exit feature
	HAL_PWR_EnableSleepOnExit ();				// enabled after all the initializations

	/* start with fresh Status register of Timer to avoid any spurious interrupts */
	  TIM6->SR = 0;

	//note: till here timer is only initialized not started, we just have to start the timer (in order to generate required delay), as we have done the initializations.
	ToggleWithDelay ();

	while(1);

	return 0;
}

void ToggleWithDelay ()
{
	//start timer in interrupt mode
	HAL_TIM_Base_Start_IT ( &htim_6 );
}


void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
	 if ( HAL_UART_Transmit ( &htim_6, (uint8_t*)data, (uint16_t)strlen((char*)data), HAL_MAX_DELAY ) != HAL_OK )
	 {
		 Error_Handler();
	 }

}

void HAL_UART_TxCpltCallback( UART_HandleTypeDef *huart )
{
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_RESET);

}


void SystemClockConfig()
{
	//we do not need clk config in this application, so default clock is sufficient
}

void TIM6_Inits()
{
	htim_6.Instance = TIM6;
	htim_6.Init.CounterMode = TIM_COUNTERMODE_UP;				//Basic timer can only do up counting
	htim_6.Init.Prescaler = 24;
	htim_6.Init.Period = 64000 - 1;

	if ( HAL_TIM_Base_Init ( &htim_6 ) != HAL_OK )				//Initializing time base unit of Basic Timer
	{
		Error_Handler ();
	}

}


void GPIO_Inits()
{

	//these pins are used for debugging purpose
    __HAL_RCC_GPIOA_CLK_ENABLE();

	GPIO_InitTypeDef ledgpio ;
	ledgpio.Pin = GPIO_PIN_5;
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
	ledgpio.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOA,&ledgpio);

	ledgpio.Pin = GPIO_PIN_12;
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
	ledgpio.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOA,&ledgpio);

}


void UART2_Inits ()
{
	huart2.Instance = USART2;
	huart2.Init.BaudRate = 921600;
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart2.Init.Mode = UART_MODE_TX;

	if ( HAL_UART_Init(&huart2) != HAL_OK )
	{
		//There is a problem
		Error_Handler();
	}

}

void Error_Handler ()
{
	while(1);
}














/*
 * 1. Processor Initializations
 * 2. System Clock Configurations
 * 3. Peripheral Initializations
 * 	  High Level Inits (done in UART2_Init() ) + Low Level Inits ( done in msp.c)
 *
 *
 * Processor Initializations: ( done in HAL_Inits() )
 * - High Level Inits
 * - Low Level Inits (call is made by HAL_Init() to HAL_MspInit() in msp.c to do this task)
 *
 *
 * Peripheral Initializations:
 * - High Level Inits   ( done in UART2_Init () )
 * - Low Level Inits	(call is made by HAL_UART_Init() to HAL_UART_MspInit() in msp.c to do this task)
 *
 * */
