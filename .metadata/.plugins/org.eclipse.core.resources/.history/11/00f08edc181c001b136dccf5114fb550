/*
 * Write a application, which uses basic timer to generate interrupt for every 10  microseconds
 * but with timer clock frequency, TIMx_CLK of 50Mhz. Toggle the GPIO or LED inside, the Timer IRQ handler and verify using logic analyzer.
 *
 * */


#include "main.h"
#include<string.h>


void SystemClockConfig ();
void TIM6_Init ();




int main ()
{
	HAL_Init ();

	SystemClockConfig ();

	TIM6_Init ();



	return 0;
}

void SystemClockConfig ()
{
	RCC_OscInitTypeDef osc_init;

	memset ( &osc_init, 0, sizeof(osc_init) );
	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	osc_init.HSIState = RCC_HSI_ON;
	osc_init.HSICalibrationValue = 16;
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	osc_init.PLL.PLLState = RCC_PLL_ON;
	osc_init.PLL.PLLM = 2;
	osc_init.PLL.PLLN = 200;
	osc_init.PLL.PLLP = 4;
	osc_init.PLL.PLLQ = 2;
	osc_init.PLL.PLLR = 2;

	HAL_RCC_OscConfig ( &osc_init );

	RCC_ClkInitTypeDef clk_init;
	uint32_t FLatency;

	memset ( &clk_init, 0, sizeof(clk_init) );
	clk_init.ClockType = ( RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 );
	clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
	clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
	clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
	clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
	FLatency = FLASH_ACR_LATENCY_1WS;

	HAL_RCC_ClockConfig ( &clk_init, FLatency );

}

void TIM6_Init ()
{


}























/*
 * 1. Processor Initializations
 * 2. System Clock Configurations
 * 3. Peripheral Initializations
 * 	  High Level Inits (done in UART2_Init() ) + Low Level Inits ( done in msp.c)
 *
 *
 * Processor Initializations: ( done in HAL_Inits() )
 * - High Level Inits
 * - Low Level Inits (call is made by HAL_Init() to HAL_MspInit() in msp.c to do this task)
 *
 *
 * Peripheral Initializations:
 * - High Level Inits   ( done in UART2_Init () )
 * - Low Level Inits	(call is made by HAL_UART_Init() to HAL_UART_MspInit() in msp.c to do this task)
 *
 * */
