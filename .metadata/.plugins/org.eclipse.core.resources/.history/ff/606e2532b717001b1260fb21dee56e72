/*
 * WAP to send characters over UART to MCU. MCU should convert all the the lower case letters in to uppercase and send it back to the user
 * Using below parameter settings:
 * BaudRate = 115200
 * No of data bits = 8
 * Stop Bits = 1
 * Parity = None
 * NO UART Hardware flow control
 * Use UART2 peripheral of the MCU in Asynchronous mode (ie UART mode)
 *
 * */


#include "main.h"
#include "main.h"
#include<string.h>

void SystemClockConfig();
void UART2_Init ();
void Error_Handler ();

UART_HandleTypeDef uart2;

char * data = "UART testing\n";

int main()
{
	//first API to be called in order to use STMCube HAL LAyer
	//it does HL initializations and LL initializations of processor
	HAL_Init();

	//not present in Cube HAL, this  is application specific, by default system clock will be running internal RC oscillator, but to change it this function is used
	SystemClockConfig();

	//HLL initializations and LL initializations of peripheral
	UART2_Init ();

	//note: Code will be blocked at HAL_UART_Transmit() or HAL_UART_Receive() until byte is received
	uint32_t status;
	status = HAL_UART_Transmit ( &uart2, (uint8_t *) data, strlen(data), HAL_MAX_DELAY );			//HAL_MAX_DELAY is standard macro of HAL which tells time at which something is declared as time out
	if ( status != HAL_OK )
	{
		//means data transmission failed
		Error_Handler();
	}

	uint8_t rcv_data;
	HAL_UART_Receive_IT ( &uart2, &rcv_data, 1 );				//in this processor will not wait till data byte is received rather processor will on doing it own work and it will receive interrupt when data byte is received, interrupt handler of uart will execute and there we will


	while(1);

	return 0;
}

void SystemClockConfig()
{
	//this application does not require system clock configurations
}

void UART2_Init ()
{
		//UART_HandleTypeDef uart2;
		uart2.Instance = USART2;
		uart2.Init.BaudRate = 115200;
		uart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
		uart2.Init.Mode = UART_MODE_RX;
		uart2.Init.OverSampling = UART_OVERSAMPLING_8;
		uart2.Init.Parity = UART_PARITY_NONE;
		uart2.Init.StopBits = UART_STOPBITS_1;
		uart2.Init.WordLength = UART_WORDLENGTH_8B;

		if ( HAL_UART_Init ( &uart2 ) != HAL_OK )		//from this api, HAL_UART_MspInit() api will called and LL inits of peripheral will be done
		{
			//something went wrong
			Error_Handler ();
		}
}

void Error_Handler ()
{
	//we can give warning here like blinking red led
	while(1);
}




/*
 * 1. Processor Initializations
 * 2. System Clock Configurations
 * 3. Peripheral Initializations
 * 	  High Level Inits (done in UART2_Init() ) + Low Level Inits ( done in msp.c)
 *
 *
 * Processor Initializations: ( done in HAL_Inits() )
 * - High Level Inits
 * - Low Level Inits (call is made by HAL_Init() to HAL_MspInit() in msp.c to do this task)
 *
 *
 * Peripheral Initializations:
 * - High Level Inits   ( done in UART2_Init () )
 * - Low Level Inits	(call is made by HAL_UART_Init() to HAL_UART_MspInit() in msp.c to do this task)
 *
 * */
